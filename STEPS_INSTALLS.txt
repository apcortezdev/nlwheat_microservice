# InstalaÃ§Ã£o do Elixir

Para a instalaÃ§Ã£o no Linux e macOS, recomendamos a instalaÃ§Ã£o com o gerenciador de pacotes **asdf** e caso vocÃª enfrente algum problema com esse mÃ©todo, use o [mÃ©todo de instalaÃ§Ã£o padrÃ£o](https://www.notion.so/Configura-es-do-ambiente-9d73d4eefa7043f593d9c768922306ca).

## InstalaÃ§Ã£o do Elixir com asdf

O **asdf** Ã© um gerenciador de versÃµes que pode ser usado para diversos runtimes como Node.js, Ruby, Python, inclusive o Elixir.

VocÃª pode seguir o passo a passo para a instalaÃ§Ã£o de acordo com o seu sistema operacional a partir do site oficial: https://asdf-vm.com/#/core-manage-asdf

O **asdf** nÃ£o Ã© suportado pelo Windows, para esse sistema utilize o mÃ©todo de instalaÃ§Ã£o padrÃ£o. PorÃ©m com WSL Ã© possÃ­vel a instalaÃ§Ã£o com o asdf.

O processo que faremos a seguir Ã© focado na instalaÃ§Ã£o em distribuiÃ§Ãµes do **Debian**, e o primeiro passo Ã© instalar algumas ferramentas que o Erlang utiliza como dependÃªncia

    apt-get -y install build-essential inotify-tools autoconf m4 libncurses5-dev libwxgtk-webview3.0-gtk3-dev libwxgtk3.0-gtk3-dev libgl1-mesa-dev libglu1-mesa-dev libpng-dev libssh-dev unixodbc-dev xsltproc fop libxml2-utils libncurses-dev openjdk-11-jdk

ApÃ³s instaladas as ferramentas, vocÃª pode instalar o git e clonar o repositÃ³rio, e por fim verificar se estÃ¡ tudo certo com o git checkout:

    sudo apt install git
    git clone https://github.com/asdf-vm/asdf.git ~/.asdf
    cd ~/.asdf
    git checkout "$(git describe --abbrev=0 --tags)"

ApÃ³s verificar e validar que estÃ¡ tudo ok, vocÃª pode adicionar uma variÃ¡vel de ambiente para chamar o asdf de forma mais simples no terminal, adicionando o PATH dele no arquivo .bashrc.

    echo -e '\n. $HOME/.asdf/asdf.sh' >> ~/.bashrc
    echo -e '\n. $HOME/.asdf/completions/asdf.bash' >> ~/.bashrc
    source ~/.bashrc

obs: Caso utilize o Zsh, basta trocar o ~/.bashrc para ~/.zshrc.

ApÃ³s ter instalado com sucesso o asdf, agora iremos instalar plugins que nos permitirÃ¡ instalar o Erlang e o Elixir.

### Instalando os plugins

Para instalar os plugins necessÃ¡rios basta rodar os comandos:

    asdf plugin-add erlang
    asdf plugin-add elixir

### Instalando Elixir e Erlang

Para instalar o Elixir, basta rodar o seguinte comando:

    asdf install elixir 1.12.3

E agora precisamos informar ao asdf qual versÃ£o do Elixir deve ser usada pela mÃ¡quina:

    asdf global elixir 1.12.3

Agora com o asdf instalado, basta rodar:

    asdf install erlang 24.1.2

E depois Ã© sÃ³ configurar essa versÃ£o para ser usada globalmente pela mÃ¡quina:

    asdf global erlang 24.1.2

## InstalaÃ§Ã£o do Elixir com asdf (OSX e outros)

Para diferentes versÃµes e distribuiÃ§Ãµes do Linux, e OSX vocÃª pode acompanhar o passo a passo por aqui:
https://github.com/asdf-vm/asdf-erlang#before-asdf-install

## MÃ©todo de instalaÃ§Ã£o padrÃ£o

Para realizar a instalaÃ§Ã£o do Elixir, basta acessar o link e seguir os passos de acordo com seu sistema operacional:

[Installing Elixir](https://elixir-lang.org/install.html)

Caso queira, vocÃª pode seguir por aqui mesmo mas prefira sempre seguir diretamente do site oficial para o caso de alguma atualizaÃ§Ã£o no mÃ©todo de instalaÃ§Ã£o.

### Windows

Para o Windows, usaremos o gerenciador de pacotes Chocolatey. A instalaÃ§Ã£o por meio dele evita alguns problemas, facilita a atualizaÃ§Ã£o e tambÃ©m, em caso de necessidade, a desinstalaÃ§Ã£o.

Se vocÃª jÃ¡ possui o Chocolatey instalado, pode partir direto para a instalaÃ§Ã£o do Elixir 
(https://www.notion.so/Configura-es-do-ambiente-9d73d4eefa7043f593d9c768922306ca).

Para instalar o **Chocolatey** seguiremos os passos citados no site oficial:
(https://chocolatey.org/)

1. Busque no campo de busca do Windows por **Windows PowerShell**, clique com o botÃ£o direito em cima do        programa e escolha a opÃ§Ã£o **Executar como administrador**.
    
O Powershell trabalha com um esquema de autorizaÃ§Ãµes (conhecido como `Execution Policy`) para execuÃ§Ã£o de scripts e, por isso, precisamos verificar se o presente no sistema estÃ¡ compatÃ­vel com o que o Chocolatey precisa. 
    
2. Execute o seguinte comando:

    Get-ExecutionPolicy

Caso ele retorne Restricted, execute o comando:

    Set-ExecutionPolicy RemoteSigned

E escolha a opÃ§Ã£o `[A] Sim para Todos`

Caso o comando acima apresente erro, tente usar:
`Set-ExecutionPolicy Bypass -Scope Process`

Verifique se alteraÃ§Ã£o de permissÃ£o ocorreu com sucesso executando novamente o comando:

    Get-ExecutionPolicy

3.  Alterada a permissÃ£o, basta instalar o **Chocolatey** com o comando:

    Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

Caso o comando acima apresente um erro, verifique se a sua mÃ¡quina atende Ã s requisiÃ§Ãµes mÃ­nimas

    Windows 7+ / Windows Server 2003+
    PowerShell v3+
    .NET Framework 4.5+

Caso o erro apresentado seja ExceÃ§Ã£o ao definir "SecurityProtocol": "NÃ£o Ã© possÃ­vel converter o valor "3312", siga esse guia: https://chocolatey.org/blog/remove-support-for-old-tls-versions

4.  ApÃ³s o fim da instalaÃ§Ã£o, feche, abra o Powershell como **administrador** novamente e execute:

    choco -v

Caso ele retorne a versÃ£o do **Chocolatey**, a instalaÃ§Ã£o foi um sucesso. Para finalizar, basta instalar a versÃ£o mais recente do Elixir com o seguinte comando (ainda com o PowerShell em modo administrador:

    cinst elixir

Ao realizar a instalaÃ§Ã£o do Elixir com sucesso, vocÃª pode verificar se deu tudo certo rodando `elixir --version` no terminal. Caso retorne algum erro, reinicie sua mÃ¡quina e tente novamente e se mesmo assim o erro persistir, vocÃª pode seguir a recomendaÃ§Ã£o de adicionar manualmente o Elixir nas configuraÃ§Ãµes de variÃ¡veis de ambiente do seu sistema operacional. A seÃ§Ã£o (chamada **Setting PATH environment variable**) estÃ¡ logo abaixo das instruÃ§Ãµes de download no site do Elixir linkado aqui: (https://www.notion.so/Ambiente-de-desenvolvimento-Trilha-Elixir-aa2399b4ec17447582d04cbce8ffa12f).

### WSL

O WSL (Windows Subsystem for Linux) permite que o Windows ( a partir do windows 10), executem binÃ¡rios e scripts Linux diretamente do Windows, assim sendo uma alternativa para poder utilizar um ambiente Linux sem precisar abrir mÃ£o do Windows.
Para a instalaÃ§Ã£o do WSL  pode ser feito de uma forma bem simples, abra o PowerShell como administrador e rode o seguinte comando:

    wsl --install

E ir na `Microsoft Store` e escolher a distribuiÃ§Ã£o de sua escolha.

Caso nÃ£o funcione dessa forma, existem um mÃ©todo de instalaÃ§Ã£o para versÃµes mais antigas que vocÃª pode seguir clicando aqui: (https://docs.microsoft.com/pt-br/windows/wsl/install-manual) 

Ah, e tambÃ©m no canal da Rocketseat tem um Root da Jakeliny falando sobre o WSL, vale a pena dar uma conferida ðŸ˜‰: https://youtu.be/hd6lxt5iVsg

### Debian/Ubuntu

Este Ã© o mÃ©todo de instalaÃ§Ã£o padrÃ£o, mas caso tenha algum problema, tente recorrer ao asdf ðŸ’œ. 

1. Adicione o repositÃ³rio do Erlang:
    
    wget https://packages.erlang-solutions.com/erlang-solutions_2.0_all.deb && sudo dpkg -i erlang-solutions_2.0_all.deb
    
2. Rode:
    
    sudo apt-get update
    
3. Instale o Erlang:
    
    sudo apt-get install esl-erlang
    
4. Instale o Elixir:
    
    sudo apt-get install elixir
    

### macOS

1. Atualize o Homebrew para a ultima versÃ£o:
    
    brew update
    
2. Instale o Elixir rodando o seguinte comando:
    
    brew install elixir
    

Ao realizar a instalaÃ§Ã£o do Elixir com sucesso, vocÃª pode verificar se deu tudo certo rodando `elixir --version` no terminal. Caso retorne algum erro, reinicie sua mÃ¡quina e tente novamente e se mesmo assim o erro persistir, vocÃª pode seguir a recomendaÃ§Ã£o de adicionar manualmente o Elixir nas configuraÃ§Ãµes de variÃ¡veis de ambiente do seu sistema operacional. A seÃ§Ã£o (chamada **Setting PATH environment variable**) estÃ¡ logo abaixo das instruÃ§Ãµes de download no site do Elixir linkado acima ou clicando aqui: (https://elixir-lang.org/install.html)).

Ao realizar a instalaÃ§Ã£o do Elixir com sucesso, vocÃª pode verificar se deu tudo certo rodando `elixir --version` no terminal. Caso retorne algum erro, reinicie sua mÃ¡quina e tente novamente e se mesmo assim o erro persistir, vocÃª pode seguir a recomendaÃ§Ã£o de adicionar manualmente o Elixir nas configuraÃ§Ãµes de variÃ¡veis de ambiente do seu sistema operacional. A seÃ§Ã£o (chamada **Setting PATH environment variable**) estÃ¡ logo abaixo das instruÃ§Ãµes de download no site do Elixir linkado acima ([ou clicando aqui](https://elixir-lang.org/install.html)).

# Phoenix

O Phoenix Ã© um framework para a construÃ§Ã£o de aplicaÃ§Ãµes web que tambÃ©m serÃ¡ usado ao longo da jornada, e por isso Ã© importante que vocÃª faÃ§a tambÃ©m essa instalaÃ§Ã£o.

Com o Elixir instalado corretamente, basta rodar o seguinte comando para instalar o Phoenix:

    mix archive.install hex phx_new

Caso pergunte algo, basta aceitar tudo com `Y`.

VocÃª pode tambÃ©m acompanhar isso na documentaÃ§Ã£o do Phoenix e checar se estÃ¡ com a versÃ£o mais recente: (https://hexdocs.pm/phoenix/installation.html#phoenix)

# InstalaÃ§Ã£o do PostgreSQL

## InstalaÃ§Ã£o padrÃ£o (Sem Docker)

Para instalar o PostgreSQL na sua mÃ¡quina basta escolher a opÃ§Ã£o adequada para o seu sistema operacional e fazer a instalaÃ§Ã£o como recomendado: (https://www.postgresql.org/download/)

Caso queira, vocÃª pode seguir os passos listados aqui de forma mais simples.

### Linux Ubuntu 20.04 LTS

Para a instalaÃ§Ã£o no Linux Ubuntu rode os seguintes comandos separadamente:

    sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'

    wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -

    sudo apt-get update

    sudo apt-get -y install postgresql

### macOS

A instalaÃ§Ã£o no macOS Ã© bem mais simples. Com o Homebrew, basta rodar:

    brew install --cask postgres

### Windows

Para o Windows a Ãºnica forma de instalaÃ§Ã£o disponÃ­vel Ã© atravÃ©s do instalador. VocÃª pode realizar o download atravÃ©s desse link: (https://www.enterprisedb.com/postgresql-tutorial-resources-training?cid=437)

## InstalaÃ§Ã£o do PostgreSQL com Docker

Se vocÃª nÃ£o conseguiu instalar o PostgreSQL localmente na sua mÃ¡quina, Ã© possÃ­vel instalar usando o Docker mas prefira a instalaÃ§Ã£o padrÃ£o quando possÃ­vel. 

Para isso, antes precisaremos do Docker instalado:

### InstalaÃ§Ã£o do Docker

O Docker Ã© uma ferramenta que nos permite pular as etapas chatas de configuraÃ§Ã£o de serviÃ§os para nossa aplicaÃ§Ã£o. AlÃ©m disso, ele permite reaproveitarmos o Kernel da mÃ¡quina hospedeira entre vÃ¡rios serviÃ§os executados simultaneamente, conhecidos como containers.

Para iniciar a instalaÃ§Ã£o do Docker vamos prosseguir para a seÃ§Ã£o "**Get Started**" presente no site da ferramenta: (https://www.docker.com/get-started)

**Windows (64 Bit)**

O Docker no Windows possui alguns requisitos: 

- Microsoft Windows 10 Professional  ou Enterprise 64-bit
- Caso vocÃª possua o Windows 10 Home 64-bit tambÃ©m Ã© possÃ­vel usar o Docker mas serÃ¡ necessÃ¡rio instalar o WSL2 tambÃ©m (o instalador jÃ¡ se encarrega disso para vocÃª)

Caso vocÃª possua o Windows 10 32-bit, o Docker nÃ£o Ã© compatÃ­vel e a instalaÃ§Ã£o de serviÃ§os como banco de dados deverÃ¡ ser feita diretamente no sistema operacional conforme mencionado aqui: (https://www.notion.so/Configura-es-do-ambiente-9d73d4eefa7043f593d9c768922306ca). 

Caso tenha todos requisitos, entÃ£o faÃ§a a instalaÃ§Ã£o do Docker para Windows: (https://www.docker.com/products/docker-desktop)

Depois de instalar o Docker e abrir o software vocÃª jÃ¡ estÃ¡ pronto para continuar. Lembrando que essa versÃ£o do Docker para Windows tem uma interface visual muito bacana, ou seja, vocÃª pode usar a interface para visualizar os serviÃ§os sendo executados, logs, imagens e muito mais.

Para verificar que o Docker foi instalado corretamente, em **uma nova janela** do terminal execute:

    docker version

**Windows (32 Bit)**

Infelizmente o Docker nÃ£o possui suporte para sistemas 32 Bit, nesse caso Ã© recomendÃ¡vel que vocÃª instale manualmente cada serviÃ§o (como o PostgreSQL que serÃ¡ utilizado nessa trilha). 

Na seÃ§Ã£o de instalaÃ§Ã£o do Postgres para o Windows :(https://www.notion.so/Configura-es-do-ambiente-9d73d4eefa7043f593d9c768922306ca) deixaremos um link para que vocÃª possa instalar o PostgreSQL manualmente.

**Mac OSX**

No macOS o processo de instalaÃ§Ã£o do Docker Ã© extremamente simples, vocÃª precisa apenas baixar o app executÃ¡vel e executa-lo na mÃ¡quina para iniciar o Docker: (https://hub.docker.com/editions/community/docker-ce-desktop-mac)

Depois de aberto vocÃª pode garantir que o Docker foi instalado corretamente executando o comando abaixo em uma nova janela do terminal:

    docker version

**Linux (Ubuntu/Debian)**

No Linux, vamos instalar o Docker utilizando o `apt`, para isso, em seu terminal, execute os comandos abaixo:

    sudo apt update
    sudo apt remove docker docker-engine docker.io
    sudo apt install docker.io

Agora com o Docker instalado, vamos habilitar para que seu serviÃ§o seja iniciado automaticamente com o sistema:

    sudo systemctl start docker
    sudo systemctl enable docker

Para garantir que o Docker foi instalado da forma correta, execute no terminal:

    docker version

VocÃª precisarÃ¡ executar todos comandos do Docker utilizando o `sudo`, mas caso queira executa-los sem o `sudo`, utilize [esse guia](https://docs.docker.com/engine/install/linux-postinstall/#manage-docker-as-a-non-root-user).

**Com o Docker instalado na sua mÃ¡quina, basta rodar no terminal o comando:**

    docker run --name postgres -e POSTGRES_PASSWORD=postgres -p 5432:5432 -d postgres

Os dados para autenticaÃ§Ã£o no banco nesse caso serÃ£o:
usuÃ¡rio: postgres
senha: postgres

Lembrando que caso vocÃª esteja usando Ubuntu/Debian Ã© necessÃ¡rio usar `sudo` antes do comando.

# ConfiguraÃ§Ãµes para o Visual Studio Code

## ElixirLS

A prÃ³xima extensÃ£o a ser instalada Ã© a ElixirLS, que tambÃ©m pode ser acessada diretamente pelo link:

[ElixirLS: Elixir support and debugger - Visual Studio Marketplace](https://marketplace.visualstudio.com/items?itemName=JakeBecker.elixir-ls)

ApÃ³s finalizar a instalaÃ§Ã£o, precisamos ajustar duas pequenas coisas nas configuraÃ§Ãµes da prÃ³pria extensÃ£o. Para isso, clique no Ã­cone da engrenagem e depois em "Extension Settings".

Aqui vocÃª irÃ¡ desmarcar a primeira caixinha que diz "Elixir LS: Dialyzer Enabled"
E mais abaixo, desmarque tambÃ©m a opÃ§Ã£o que diz "Elixir LS: Suggest Specs"

## Habilitar format on save

Para habilitar essa funcionalidade, comece apertentando `crtl + shift + p`  para abrir a seguinte barra de pesquisa.

ApÃ³s selecionadas essas teclas, irÃ¡ aparecer uma tela com esse sinal de maior >, esse sinal Ã© importante para procurar itens relacionados ao vscode e nÃ£o ao cÃ³digo em si. O prÃ³ximo passo Ã© pesquisar por Open Settings (JSON), selecione e irÃ¡ abrir um json com as configuraÃ§Ãµes do seu Visual Studio. 
Uma vez aberto, basta acrescentar no json a seguinte linha:

    {
        "editor.formatOnSave": true,
    }

Ou caso jÃ¡ tenha e esteja como `false`, basta alterar para `true`, e assim, toda vez que salvar o seu cÃ³digo, ele irÃ¡ ser formatado automaticamente.